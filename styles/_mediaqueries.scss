@use "sass:math";
@import 'variables';

// MIXIN MEDIA QUERIES

@mixin xs {
  @media (min-width: map-get($breakpoints, "xs")) {
    @content;
  }
}

@include xs {
  @for $i from 1 through $grid-columns {
    .col-xs-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(($i * 100%), $grid-columns);
    }
  }
}

@mixin sm {
  @media (min-width: map-get($breakpoints, "sm")) {
    @content;
  }
}

@include sm {
  @for $i from 1 through $grid-columns {
    .col-sm-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(($i * 100%), $grid-columns);
    }
  }
}

@mixin md {
  @media (min-width: map-get($breakpoints, "md")) {
    @content;
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .col-md-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(($i * 100%), $grid-columns);
    }
  }
}

@mixin lg {
  @media (min-width: map-get($breakpoints, "lg")) {
    @content;
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .col-lg-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(($i * 100%), $grid-columns);
    }
  }
}

@mixin xl {
  @media (min-width: map-get($breakpoints, "xl")) {
    @content;
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-xl-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(($i * 100%), $grid-columns);
    }
  }
}

@mixin xxl {
  @media (min-width: map-get($breakpoints, "xxl")) {
    @content;
  }
}

@include xxl {
  @for $i from 1 through $grid-columns {
    .col-xxl-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(($i * 100%), $grid-columns);
    }
  }
}
